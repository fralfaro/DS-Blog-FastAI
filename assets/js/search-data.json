{
  
    
        "post0": {
            "title": "Jupyter Book",
            "content": "Introducci&#243;n . Jupyter Book es un proyecto de código abierto para crear libros y documentos mediante Jupyter Notebooks y/o Markdown. . Algunas características improtante del uso de Jupyter Book: . contenido con calidad de publicación que incluya figuras, símbolos matemáticos, citas y referencias cruzadas! | escribir contenido como Jupyter Notebooks, markdown o reStructuredText | Agregue interactividad a su libro, por ejemplo, alternar la visibilidad de las celdas, conectarse con un servicio en línea como Binder e incluir resultados interactivos (por ejemplo, figuras y widgets). | generar una variedad de resultados, incluidos sitios web (HTML, CSS, JS), markdown y PDF. | una interfaz de línea de comandos para crear libros rápidamente, por ejemplo, jupyter-book build mybook / | . En esta sesión, se muestra un ejemplo de cómo crear un Jupyter Book desde cero y algunas de las características clave que ofrece Jupyter Book. . Primeros pasos . Instalaci&#243;n . Para instalar Jupyter Book, necesitará usar la línea de comando. Si ha instalado Anaconda, puede usar: . conda install -c conda-forge jupyter-book . De lo contrario, puede instalar con pip: . pip install jupyter-book . Crear una estructura de libro . Jupyter Book viene con una herramienta que le permite crear y construir libros rápidamente. Para crear el esqueleto del libro, escriba lo siguiente en la línea de comando: . jupyter-book create jupiter . Nota:Aquí llamamos al libro jupiter, pero puedes elegir llamar a tu libro como quieras. . Ahora tendrás un nuevo directorio llamado jupiter (o como quieras llamar a tu libro), con el siguiente contenido: . jupiter ├── _config.yml ├── _toc.yml ├── content.md ├── intro.md ├── markdown.md ├── notebooks.ipynb ├── references.bib └── requirements.txt .",
            "url": "https://fralfaro.github.io/ds_blog/jupyter/2021/08/20/jb.html",
            "relUrl": "/jupyter/2021/08/20/jb.html",
            "date": " • Aug 20, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "RISE",
            "content": "Introducci&#243;n . RISE es una extensión a los jupyter notebooks que permite transformar tus notebooks en presentaciones interactivas. . Toda las celdas pueden editarse y ejecutarse directamente, durante la presentación. Esto es práctico si necesitas corregir un error en una celda de texto. Más importante aún, puedes ejecutar código directamente en el kernel. En una misma diapositiva puedes tener múltiples celdas y elegir cuál ejecutar, o corregir el texto y volver a ejecutar. . . &#191;Por qu&#233; usar RISE? . Simplifica la generación de material. | Se mantiene un archivo y no varios archivos para hablar de lo mismo. | Es fácil de corregir, no se necesita mucho esfuerzo (similar a una PPT). | . Conocimiento A priori . Crear presentaciones con RISE es sencillo siempre y cuando tengas conocimientos básicos de Python, Jupyter Notebooks y línea de comandos. . Además, será útil tener experiencia instalando y trabajando con extensiones de Jupyter Notebooks y paquetes de Python. . Primeros Pasos . Instalaci&#243;n . Para instalar RISE, necesitará usar la línea de comando. Si ha instalado Anaconda, puede usar: . conda install -c conda-forge rise . De lo contrario, puede instalar con pip: . pip install RISE . Nota:No interactuarás directamente con RISE. En su lugar, podrá acceder a él a través de Jupyter Notebooks. . Habilitaci&#243;n del modo de presentaci&#243;n . Para crear una presentación, deberá iniciar Jupyter Notebooks y abrir un nuevo notebook (tenga en cuenta que debe hacer esto después de haber instalado RISE). Una vez que tenga un Jupyter Notebook nuevo, deberá habilitar la presentación de diapositivas. Puede hacer esto haciendo lo siguiente: . Haga clic en &quot;Ver&quot; en la barra de herramientas de Jupyter | Coloca el cursor sobre &quot;Barra de herramientas de celda&quot; en el menú &quot;Ver&quot; | Haga clic en &quot;Presentación de diapositivas&quot; en el menú &quot;Barra de herramientas de celda&quot; | . . Creando las diapositivas con celdas . En este punto, debería tener una barra de herramientas de celda con un menú desplegable en el lado derecho: . Debería ver seis opciones aquí. Este menú desplegable y sus opciones determinan cómo encaja cada celda en la presentación. Las opciones y sus descripciones se encuentran a continuación: . slide: indica que la celda seleccionada debe ser el comienzo de una nueva diapositiva. | sub-slide -: indica que la celda seleccionada debe ser el comienzo de una nueva sub-diapositiva, que aparece en un nuevo marco debajo de la diapositiva anterior. | fragment: indica que la celda seleccionada debe aparecer como una compilación de la diapositiva anterior. | skip: indica que la celda seleccionada debe omitirse y no ser parte de la presentación de diapositivas. | notes: indica que la celda seleccionada debe ser solo notas del presentador. | - -: indica que la celda seleccionada debe seguir el comportamiento de la celda anterior, lo cual es útil cuando una celda de rebaja y una celda de código deben aparecer simultáneamente. | . Cada una de estas opciones puede incluir código Python o código Markdown/HTML/LaTeX como un Jupyter Notebook tradicional. . Ver la presentaci&#243;n de diapositivas . Una vez que se han utilizado las celdas para crear material para la presentación, la presentación se puede ver directamente desde el notebook. . Hay dos opciones para ver la presentación de diapositivas: . Usar el acceso directo OPTION + R shortcut (ALT + R on Windows) para ingresar y salir del modo de presentación desde dentro de la computadora portátil | Al hacer clic en el botón &quot;Modo de presentación&quot; de la computadora portátil, esto solo aparecerá si ha instalado RISE. | . . Después de ingresar al modo de presentación, debería ver una pantalla similar a esta: . . Cambio de diapositivas . Si bien puede ser tentador usar las teclas &lt;- y -&gt; para cambiar las diapositivas en la presentación, esto no funcionará por completo: omitirá las celdas marcadas como sub-slides. En su lugar, se debe usar ESPACIO para mover la presentación de diapositivas hacia adelante y MAYÚS + ESPACIO para mover la presentación de diapositivas hacia atrás. . Hay muchos otros atajos de teclado a los que se puede acceder dentro de la presentación haciendo clic en el signo de interrogación (?) en la esquina inferior izquierda. . Ejecuci&#243;n de c&#243;digo y edici&#243;n sobre la marcha . Una de las mejores cosas de RISE es que funciona en una sesión de Python en vivo, lo que significa que puede editar y ejecutar código mientras se ejecuta la presentación. . . Exportar presentaci&#243;n . Puedes exportar tu presentación desplegando la opción: File -&gt; Download as. . Nota:Para poder descargar en formato .pdf, necesita tener instalado pandoc. . . Referencias . RISE - Documentation | Creating Interactive Slideshows in Jupyter Notebooks | .",
            "url": "https://fralfaro.github.io/ds_blog/jupyter/2021/08/05/rise.html",
            "relUrl": "/jupyter/2021/08/05/rise.html",
            "date": " • Aug 5, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "TDD",
            "content": "Introducci&#243;n . Esta página busca dar señales de cómo abordar el desarrollo de software para Data Science usando Test Driven Development, una técnica ampliamente usada en otros rubros de la programación. . &#191;Qu&#233; es el Test Driven Development? . En palabras simples, el desarrollo guiado por pruebas pone las pruebas en el corazón de nuestro trabajo. En su forma más simple consiste en un proceso iterativo de 3 fases: . . Red: Escribe un test que ponga a prueba una nueva funcionalidad y asegurate de que el test falla | Green: Escribe el código mínimo necesario para pasar ese test | Refactor: Refactoriza de ser necesario | . &#191;Porqu&#233; deber&#237;a usarlo? . Existen varias razones por las que uno debería usar TDD. Entre ellas podemos encontrar: . Formular bien nuestros pensamientos mediante la escritura de un test significativo antes de ponernos a solucionar el problema nos ayuda a clarificar los límites del problema y cómo podemos resolverlo. Con el tiempo esto ayuda a obtener un diseño modular y reusable del código. | Escribir tests ayuda la forma en que escribimos código, haciéndolo más legible a otros. Sin embargo, no es un acto de altruismo, la mayoría de las veces ese otro es tu futuro yo. | Verifica que el código funciona de la manera que se espera, y lo hace de forma automática. | Te permite realizar refactoring con la certeza de que no has roto nada. | Los tests escritos sirven como documentación para otros desarrolladores. | Es una práctica requerida en metodologías de desarrollo de software agile. | . Evidencia emp&#237;rica . El 2008, Nagappan, Maximilien, Bhat y Williams publicaron el paper llamado Realizing Quality Improvement Through Test Driven Development - Results and Experiences of Four Industrial Teams, en donde estudiaron 4 equipos de trabajo (3 de Microsoft y 1 de IBM), con proyectos que variaban entre las 6000 lineas de código hasta las 155k. Estas son parte de sus conclusiones: . Todos los equipos demostraron una baja considerable en la densidad de defectos:40% para el equipo de IBM, y entre 60-90% para los equipos de Microsoft. . Como todo en la vida, nada es gratis: . Incremento del tiempo de desarrollo varía entre un 15% a 35%. . Sin embargo . Desde un punto de vista de eficacia este incremento en tiempo de desarrollo se compensa por los costos de mantención reducidos debido al incremento en calidad. . Además, es importante escribir tests junto con la implementación en pequeñas iteraciones. George y Williams encontraron que escribir tests después de que la aplicación está mas o menos lista hace que se testee menos porque los desarrolladores piensan en menos casos, y además la aplicación se vuelve menos testeable. Otra conclusión interesante del estudio de George y Williams es que un 79% de los desarrolladores experimentaron que el uso de TDD conlleva a un diseño más simple. . &#191;Puedo usar TDD siempre? . No, pero puedes usarlo casi siempre. El análisis exploratorio es un caso en que el uso de TDD no hace sentido. Una vez que tenemos definido el problema a solucionar y un mejor entendimiento del problema podemos aterrizar nuestras ideas a la implementación vía testing. . Librer&#237;as disponibles . Acá listamos algunas librerías de TDD de los lenguajes que se usan en i+D . Python . unittest: Módulo dentro de la librería estándar de Python. Permite realizar tests unitarios, de integración y end to end. | doctest: Permite realizar test de la documentación del código, cuando éste trae ejemplos de uso (Como en la documentacion de Numpy o Pandas). | pytest: Librería de testing ampliamente usada en proyectos nuevos de Python. | nose: Librería que extiende unittest para hacerlo más simple. | coverage: Herramienta para medir la cobertura de código de los proyectos. | tox: Herramienta para facilitar el test de una librería en diferentes versiones e intérpretes de Python. | hypothesis: Librería para escribir tests vía reglas que ayuda a encontrar casos borde. | behave: Permite utilizar Behavior Driven Development, un proceso de desarrollo derivado del TDD. | . Knowledge base / Lecturas recomendadas . Realizing Quality Improvement Through Test Driven Development - Results and Experiences of Four Industrial Teams, es una buena lectura, sobretodo los consejos que dan en las conclusiones. | Google Testing Blog: Poseen varios artículos sobre cómo abordar problemas tipo, buenas prácticas de diseño para generar código testeable, entre otros. En particular destaca la serie Testing on the Toilet. | Cualquier artículo de Martin Fowler sobre testing, empezando por éste | Design Patterns: Los patrones de diseño de software tienen en consideración que el código sea testeable. | .",
            "url": "https://fralfaro.github.io/ds_blog/jupyter/2021/07/31/tdd.html",
            "relUrl": "/jupyter/2021/07/31/tdd.html",
            "date": " • Jul 31, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Contact Information . Name: Francisco Antonio Alfaro Medina | Phone: +56 9 94541139 | Email: francisco.alfaro.496@gmail.com | Curriculum Vitae: cv | Social Media: Github | Gitlab | Linkedin | HomePage | . | . About me . 🎮 Gaming | 🏀 Basketball | 💡 Learning | 📚 Teaching . Statistician and Teacher at Universidad Técnica Federico Santa María. I currently work as a Senior Data Scientist at ITAU (Bank). I enjoy programming, learning about different topics and teaching about maths and computer. . 🔍 Researches Interests: . Software Development | Statistical Modelling | Machine/Deep Learning | Cloud computing | Big Data | Time Series | .",
          "url": "https://fralfaro.github.io/ds_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://fralfaro.github.io/ds_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}