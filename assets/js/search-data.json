{
  
    
        "post0": {
            "title": "Demo",
            "content": "Introducci&#243;n . RISE es una extensi√≥n a los jupyter notebooks que permite transformar tus notebooks en presentaciones interactivas. . Toda las celdas pueden editarse y ejecutarse directamente, durante la presentaci√≥n. Esto es pr√°ctico si necesitas corregir un error en una celda de texto. M√°s importante a√∫n, puedes ejecutar c√≥digo directamente en el kernel. En una misma diapositiva puedes tener m√∫ltiples celdas y elegir cu√°l ejecutar, o corregir el texto y volver a ejecutar. . . Conocimiento A priori . Crear presentaciones con RISE es sencillo siempre y cuando tengas conocimientos b√°sicos de Python, Jupyter Notebooks y l√≠nea de comandos. . Adem√°s, ser√° √∫til tener experiencia instalando y trabajando con extensiones de Jupyter Notebooks y paquetes de Python. . Primeros Pasos . Instalaci&#243;n . Para instalar RISE, necesitar√° usar la l√≠nea de comando. Si ha instalado Anaconda, puede usar: . terminal conda install -c conda-forge rise . De lo contrario, puede instalar con pip: . terminal pip install RISE . Nota:No interactuar√°s directamente con RISE. En su lugar, podr√° acceder a √©l a trav√©s de Jupyter Notebooks. .",
            "url": "https://fralfaro.github.io/ds_blog/jupyter/2021/08/20/demo.html",
            "relUrl": "/jupyter/2021/08/20/demo.html",
            "date": " ‚Ä¢ Aug 20, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "TDD",
            "content": "Introducci&#243;n . Esta p√°gina busca dar se√±ales de c√≥mo abordar el desarrollo de software para Data Science usando Test Driven Development, una t√©cnica ampliamente usada en otros rubros de la programaci√≥n. . &#191;Qu&#233; es el Test Driven Development? . En palabras simples, el desarrollo guiado por pruebas pone las pruebas en el coraz√≥n de nuestro trabajo. En su forma m√°s simple consiste en un proceso iterativo de 3 fases: . . Red: Escribe un test que ponga a prueba una nueva funcionalidad y asegurate de que el test falla | Green: Escribe el c√≥digo m√≠nimo necesario para pasar ese test | Refactor: Refactoriza de ser necesario | . &#191;Porqu&#233; deber&#237;a usarlo? . Existen varias razones por las que uno deber√≠a usar TDD. Entre ellas podemos encontrar: . Formular bien nuestros pensamientos mediante la escritura de un test significativo antes de ponernos a solucionar el problema nos ayuda a clarificar los l√≠mites del problema y c√≥mo podemos resolverlo. Con el tiempo esto ayuda a obtener un dise√±o modular y reusable del c√≥digo. | Escribir tests ayuda la forma en que escribimos c√≥digo, haci√©ndolo m√°s legible a otros. Sin embargo, no es un acto de altruismo, la mayor√≠a de las veces ese otro es tu futuro yo. | Verifica que el c√≥digo funciona de la manera que se espera, y lo hace de forma autom√°tica. | Te permite realizar refactoring con la certeza de que no has roto nada. | Los tests escritos sirven como documentaci√≥n para otros desarrolladores. | Es una pr√°ctica requerida en metodolog√≠as de desarrollo de software agile. | . Evidencia emp&#237;rica . El 2008, Nagappan, Maximilien, Bhat y Williams publicaron el paper llamado Realizing Quality Improvement Through Test Driven Development - Results and Experiences of Four Industrial Teams, en donde estudiaron 4 equipos de trabajo (3 de Microsoft y 1 de IBM), con proyectos que variaban entre las 6000 lineas de c√≥digo hasta las 155k. Estas son parte de sus conclusiones: . Todos los equipos demostraron una baja considerable en la densidad de defectos:40% para el equipo de IBM, y entre 60-90% para los equipos de Microsoft. . Como todo en la vida, nada es gratis: . Incremento del tiempo de desarrollo var√≠a entre un 15% a 35%. . Sin embargo . Desde un punto de vista de eficacia este incremento en tiempo de desarrollo se compensa por los costos de mantenci√≥n reducidos debido al incremento en calidad. . Adem√°s, es importante escribir tests junto con la implementaci√≥n en peque√±as iteraciones. George y Williams encontraron que escribir tests despu√©s de que la aplicaci√≥n est√° mas o menos lista hace que se testee menos porque los desarrolladores piensan en menos casos, y adem√°s la aplicaci√≥n se vuelve menos testeable. Otra conclusi√≥n interesante del estudio de George y Williams es que un 79% de los desarrolladores experimentaron que el uso de TDD conlleva a un dise√±o m√°s simple. . &#191;Puedo usar TDD siempre? . No, pero puedes usarlo casi siempre. El an√°lisis exploratorio es un caso en que el uso de TDD no hace sentido. Una vez que tenemos definido el problema a solucionar y un mejor entendimiento del problema podemos aterrizar nuestras ideas a la implementaci√≥n v√≠a testing. . Librer&#237;as disponibles . Ac√° listamos algunas librer√≠as de TDD de los lenguajes que se usan en i+D . Python . unittest: M√≥dulo dentro de la librer√≠a est√°ndar de Python. Permite realizar tests unitarios, de integraci√≥n y end to end. | doctest: Permite realizar test de la documentaci√≥n del c√≥digo, cuando √©ste trae ejemplos de uso (Como en la documentacion de Numpy o Pandas). | pytest: Librer√≠a de testing ampliamente usada en proyectos nuevos de Python. | nose: Librer√≠a que extiende unittest para hacerlo m√°s simple. | coverage: Herramienta para medir la cobertura de c√≥digo de los proyectos. | tox: Herramienta para facilitar el test de una librer√≠a en diferentes versiones e int√©rpretes de Python. | hypothesis: Librer√≠a para escribir tests v√≠a reglas que ayuda a encontrar casos borde. | behave: Permite utilizar Behavior Driven Development, un proceso de desarrollo derivado del TDD. | . Knowledge base / Lecturas recomendadas . Realizing Quality Improvement Through Test Driven Development - Results and Experiences of Four Industrial Teams, es una buena lectura, sobretodo los consejos que dan en las conclusiones. | Google Testing Blog: Poseen varios art√≠culos sobre c√≥mo abordar problemas tipo, buenas pr√°cticas de dise√±o para generar c√≥digo testeable, entre otros. En particular destaca la serie Testing on the Toilet. | Cualquier art√≠culo de Martin Fowler sobre testing, empezando por √©ste | Design Patterns: Los patrones de dise√±o de software tienen en consideraci√≥n que el c√≥digo sea testeable. | .",
            "url": "https://fralfaro.github.io/ds_blog/jupyter/2021/07/31/tdd.html",
            "relUrl": "/jupyter/2021/07/31/tdd.html",
            "date": " ‚Ä¢ Jul 31, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Contact Information . Name: Francisco Antonio Alfaro Medina | Phone: +56 9 94541139 | Email: francisco.alfaro.496@gmail.com | Curriculum Vitae: cv | Social Media: Github | Gitlab | Linkedin | HomePage | . | . About me . üéÆ Gaming | üèÄ Basketball | üí° Learning | üìö Teaching . Statistician and Teacher at Universidad T√©cnica Federico Santa Mar√≠a. I currently work as a Senior Data Scientist at ITAU (Bank). I enjoy programming, learning about different topics and teaching about maths and computer. . üîç Researches Interests: . Software Development | Statistical Modelling | Machine/Deep Learning | Cloud computing | Big Data | Time Series | .",
          "url": "https://fralfaro.github.io/ds_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ ‚Äúsitemap.xml‚Äù | absolute_url }} | .",
          "url": "https://fralfaro.github.io/ds_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}