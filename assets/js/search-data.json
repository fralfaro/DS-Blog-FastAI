{
  
    
        "post0": {
            "title": "Curso MAT281 (2021)",
            "content": "Descripci&#243;n de la Asignatura . Curso enfocado a cubrir aspectos b√°sicos del mundo de data science, principalmente en el data analysis. . Repositorio . El material est√° disponible en el siguiente repositorio, para obtener el c√≥digo de fuente basta con que ejecutes el siguiente comando: . https://gitlab.com/FAAM/mat281 . | La documentaci√≥n se encuentra disponible en el siguiente link. . | . Topicos . Toolkit b√°sico: . IDE (Integrated Development Environment) | Git-Gihub/Gitlab | Ambientes virtuales | Jupyter Notebook | Repaso Python | . | Computaci√≥n cient√≠fica: . CPython (Introducci√≥n) | Numpy, Scipy, Sympy | . | Manipulaci√≥n de datos (lo meteria en analisis exploratorio) . Introducci√≥n base de datos | Pandas (M√≥dulos b√°sicos, groupby, merge, pivot, etc.) | Sqlalchemy (syntax b√°sica en SQL) | . | Visualizaci√≥n de datos: . Introducci√≥n | Visualizaci√≥n Imperativa, Declarativa, Interactiva | . | An√°lisis exploratorio de datos . Introducci√≥n | Casos Aplicados | . | Machine Learning . An√°lisis Supervisado | An√°lisis No Supervisado | An√°lisis Overfitting | Series Temporales (Introducci√≥n) | . | .",
            "url": "https://fralfaro.github.io/ds_blog/jupyter/2021/12/31/mat281.html",
            "relUrl": "/jupyter/2021/12/31/mat281.html",
            "date": " ‚Ä¢ Dec 31, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "TDD",
            "content": "Introducci&#243;n . Esta p√°gina busca dar se√±ales de c√≥mo abordar el desarrollo de software para Data Science usando Test Driven Development, una t√©cnica ampliamente usada en otros rubros de la programaci√≥n. . &#191;Qu&#233; es el Test Driven Development? . En palabras simples, el desarrollo guiado por pruebas pone las pruebas en el coraz√≥n de nuestro trabajo. En su forma m√°s simple consiste en un proceso iterativo de 3 fases: . . Red: Escribe un test que ponga a prueba una nueva funcionalidad y asegurate de que el test falla | Green: Escribe el c√≥digo m√≠nimo necesario para pasar ese test | Refactor: Refactoriza de ser necesario | . &#191;Porqu&#233; deber&#237;a usarlo? . Existen varias razones por las que uno deber√≠a usar TDD. Entre ellas podemos encontrar: . Formular bien nuestros pensamientos mediante la escritura de un test significativo antes de ponernos a solucionar el problema nos ayuda a clarificar los l√≠mites del problema y c√≥mo podemos resolverlo. Con el tiempo esto ayuda a obtener un dise√±o modular y reusable del c√≥digo. | Escribir tests ayuda la forma en que escribimos c√≥digo, haci√©ndolo m√°s legible a otros. Sin embargo, no es un acto de altruismo, la mayor√≠a de las veces ese otro es tu futuro yo. | Verifica que el c√≥digo funciona de la manera que se espera, y lo hace de forma autom√°tica. | Te permite realizar refactoring con la certeza de que no has roto nada. | Los tests escritos sirven como documentaci√≥n para otros desarrolladores. | Es una pr√°ctica requerida en metodolog√≠as de desarrollo de software agile. | . Evidencia emp&#237;rica . El 2008, Nagappan, Maximilien, Bhat y Williams publicaron el paper llamado Realizing Quality Improvement Through Test Driven Development - Results and Experiences of Four Industrial Teams, en donde estudiaron 4 equipos de trabajo (3 de Microsoft y 1 de IBM), con proyectos que variaban entre las 6000 lineas de c√≥digo hasta las 155k. Estas son parte de sus conclusiones: . Todos los equipos demostraron una baja considerable en la densidad de defectos:40% para el equipo de IBM, y entre 60-90% para los equipos de Microsoft. . Como todo en la vida, nada es gratis: . Incremento del tiempo de desarrollo var√≠a entre un 15% a 35%. . Sin embargo . Desde un punto de vista de eficacia este incremento en tiempo de desarrollo se compensa por los costos de mantenci√≥n reducidos debido al incremento en calidad. . Adem√°s, es importante escribir tests junto con la implementaci√≥n en peque√±as iteraciones. George y Williams encontraron que escribir tests despu√©s de que la aplicaci√≥n est√° mas o menos lista hace que se testee menos porque los desarrolladores piensan en menos casos, y adem√°s la aplicaci√≥n se vuelve menos testeable. Otra conclusi√≥n interesante del estudio de George y Williams es que un 79% de los desarrolladores experimentaron que el uso de TDD conlleva a un dise√±o m√°s simple. . &#191;Puedo usar TDD siempre? . No, pero puedes usarlo casi siempre. El an√°lisis exploratorio es un caso en que el uso de TDD no hace sentido. Una vez que tenemos definido el problema a solucionar y un mejor entendimiento del problema podemos aterrizar nuestras ideas a la implementaci√≥n v√≠a testing. . Librer&#237;as disponibles . Ac√° listamos algunas librer√≠as de TDD de los lenguajes que se usan en i+D . Python . unittest: M√≥dulo dentro de la librer√≠a est√°ndar de Python. Permite realizar tests unitarios, de integraci√≥n y end to end. | doctest: Permite realizar test de la documentaci√≥n del c√≥digo, cuando √©ste trae ejemplos de uso (Como en la documentacion de Numpy o Pandas). | pytest: Librer√≠a de testing ampliamente usada en proyectos nuevos de Python. | nose: Librer√≠a que extiende unittest para hacerlo m√°s simple. | coverage: Herramienta para medir la cobertura de c√≥digo de los proyectos. | tox: Herramienta para facilitar el test de una librer√≠a en diferentes versiones e int√©rpretes de Python. | hypothesis: Librer√≠a para escribir tests v√≠a reglas que ayuda a encontrar casos borde. | behave: Permite utilizar Behavior Driven Development, un proceso de desarrollo derivado del TDD. | . Knowledge base / Lecturas recomendadas . Realizing Quality Improvement Through Test Driven Development - Results and Experiences of Four Industrial Teams-8514b668-2c79-4567-a57d-f682b44dd3d9.pdf), es una buena lectura, sobretodo los consejos que dan en las conclusiones. | Google Testing Blog: Poseen varios art√≠culos sobre c√≥mo abordar problemas tipo, buenas pr√°cticas de dise√±o para generar c√≥digo testeable, entre otros. En particular destaca la serie Testing on the Toilet. | Cualquier art√≠culo de Martin Fowler sobre testing, empezando por √©ste | Design Patterns: Los patrones de dise√±o de software tienen en consideraci√≥n que el c√≥digo sea testeable. | .",
            "url": "https://fralfaro.github.io/ds_blog/jupyter/2021/07/31/tdd.html",
            "relUrl": "/jupyter/2021/07/31/tdd.html",
            "date": " ‚Ä¢ Jul 31, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a ‚Äúlevel 1 heading‚Äù in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here‚Äôs a footnote 1. Here‚Äôs a horizontal rule: . . Lists . Here‚Äôs a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes ‚Ä¶and‚Ä¶ . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote.¬†&#8617; . |",
            "url": "https://fralfaro.github.io/ds_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " ‚Ä¢ Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Contact Information . Name: Francisco Antonio Alfaro Medina | Phone: +56 9 94541139 | Email: francisco.alfaro.496@gmail.com | Curriculum Vitae: cv | Social Media: Github | Gitlab | Linkedin | HomePage | . | . About me . üéÆ Gaming | üèÄ Basketball | üí° Learning | üìö Teaching . Statistician and Teacher at Universidad T√©cnica Federico Santa Mar√≠a. I currently work as a Senior Data Scientist at ITAU (Bank). I enjoy programming, learning about different topics and teaching about maths and computer. . üîç Researches Interests: . Software Development | Statistical Modelling | Machine/Deep Learning | Cloud computing | Big Data | Time Series | .",
          "url": "https://fralfaro.github.io/ds_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ ‚Äúsitemap.xml‚Äù | absolute_url }} | .",
          "url": "https://fralfaro.github.io/ds_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}